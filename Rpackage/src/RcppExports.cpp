// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/scDiffNet.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// constructNet
List constructNet(sp_mat A, mat net, IntegerVector samples, int rand_sample_no, int rand_sample_size, int thread_no);
RcppExport SEXP _scDiffNet_constructNet(SEXP ASEXP, SEXP netSEXP, SEXP samplesSEXP, SEXP rand_sample_noSEXP, SEXP rand_sample_sizeSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< mat >::type net(netSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type rand_sample_no(rand_sample_noSEXP);
    Rcpp::traits::input_parameter< int >::type rand_sample_size(rand_sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(constructNet(A, net, samples, rand_sample_no, rand_sample_size, thread_no));
    return rcpp_result_gen;
END_RCPP
}
// constructDiffNet
mat constructDiffNet(mat mu1, mat sigma1_sq, int n1, mat mu2, mat sigma2_sq, int n2);
RcppExport SEXP _scDiffNet_constructDiffNet(SEXP mu1SEXP, SEXP sigma1_sqSEXP, SEXP n1SEXP, SEXP mu2SEXP, SEXP sigma2_sqSEXP, SEXP n2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< mat >::type sigma1_sq(sigma1_sqSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< mat >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< mat >::type sigma2_sq(sigma2_sqSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    rcpp_result_gen = Rcpp::wrap(constructDiffNet(mu1, sigma1_sq, n1, mu2, sigma2_sq, n2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scDiffNet_constructNet", (DL_FUNC) &_scDiffNet_constructNet, 6},
    {"_scDiffNet_constructDiffNet", (DL_FUNC) &_scDiffNet_constructDiffNet, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_scDiffNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
